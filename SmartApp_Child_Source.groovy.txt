/**
 *  Plex Plus Child
 *
 *  Copyright 2015 Christian Hjelseth / Jake Tebbett
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * INSTALL
 * ###############
 *
 *	- Install both parent and cild apps via IDE - Only publish the parent App (This App)
 *	- Enable OAuth in IDE on the parent App (This App)
 *  - Setup the Plex2SmartThings.exe (For IP matching Jake's modified exe is required)
 * 
 * VERSION CONTROL - Plex Plus Child
 * ###############
 *
 *  v2.0 - Modified Christian Hjelseth's excellent Smart App to use parent & child apps
 * 				- Allowing multi room matching to a single player
 * 				- Allowing flexible number of "rooms"
 * 		 - Added support for matching against Player Name or User Name or IP Address (IP address requires Jake's modified exe)
 *		 - Added support for on and off switches on the same state change.
 *		 - Added disabled switch to stop automation
 *	v2.1 - Removed independant debug logging from child app, now mastered from parent.
 *		 - Fix bug with disable switch
 *		 - Added Hue Colors (First select Hues)
 *  v2.2 - Changes to order of items in App
 *		 - Added momentary switch, better for triggering scenes in other apps (doesn't trigger a second time on toggle off)
 *
 */



definition(
    name: "Plex Plus Child",
    namespace: "jebbett",
    author: "Christian Hjelseth & Jacob Tebbett",
    description: "Allows web requests to dim/turn off/on lights when plex is playing",
    category: "My Apps",
    parent: "jebbett:Plex Plus",
    iconUrl: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png",
    iconX2Url: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png",
    iconX3Url: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png")


preferences {
    page name: "mainPage", install: false, uninstall: true
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unschedule()
    initialize()
}

def initialize() {

}

// Main page to select room settings
def mainPage() {
        
    dynamicPage(name: "mainPage", uninstall: true, install: true) {
        
        section() {
                label title: "Enter Room Name", defaultValue: app.label, required: false
        }
		
		//Get defined routines
		def actions = location.helloHome?.getPhrases()*.label
		if (actions) {
			actions.sort()
		}
		
		//ROOM
		section("Players") {
            input(name: "playerA1", type: "text", title: "Player name, User or IP", required:false)
            input(name: "playerB1", type: "text", title: "Player name, User or IP (alternative)", required:false)
            paragraph "To identify player, you can use either Player Device Name, Username or IP address. You may set the name to * in order to match any player."
        }
		section("Lights (Hue Bubles have Color)") {
			input "dimmers1", "capability.switchLevel", title: "Dimmers", multiple: true, required: false
            input "hues1", "capability.colorControl", title: "Hue Bulbs", multiple:true, required:false, submitOnChange: true
            input(name: "iLevelOnPlay1", type: "number", title: "Dimmers > levels on Play", defaultValue:0)
            input(name: "iLevelOnPause1", type: "number", title: "Dimmers > levels on Pause", defaultValue:30)
            input(name: "iLevelOnStop1", type: "number", title: "Dimmers > levels on Stop", defaultValue:100)
            if(hues1) {
				input "colorOnPlay", "enum", title: "Hue Bulbs > Color On Play", required: false, multiple: false, submitOnChange: true,
					options: ["Soft White", "White", "Daylight", "Warm White", "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Pink"]
                input "colorOnPause", "enum", title: "Hue Bulbs > Color On Pause", required: false, multiple: false, submitOnChange: true,
					options: ["Soft White", "White", "Daylight", "Warm White", "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Pink"]
                input "colorOnStop", "enum", title: "Hue Bulbs > Color On Stop", required: false, multiple: false, submitOnChange: true,
					options: ["Soft White", "White", "Daylight", "Warm White", "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Pink"]
            }
            input(name: "bDimOnlyIfOn1", type: "bool", title: "Dim bulbs only if they're already on")
        }
		section("Switches") {
        	input "switches2", "capability.switch", title:"Switches On When Playing (Return to Off)", multiple: true, required: false
            input "switches1", "capability.switch", title:"Switches Off When Playing (Return to On)", multiple: true, required: false
            input "mSwitchPlay", "capability.switch", title:"Momentary switch on Play", multiple: true, required: false
            input "mSwitchPause", "capability.switch", title:"Momentary switch on Pause", multiple: true, required: false
            input "mSwitchStop", "capability.switch", title:"Momentary switch on Stop", multiple: true, required: false
            input(name: "bSwitchOffOnPause1", type: "bool", title: "Switches use Play config when Paused")
            
        }
		section("Modes / Routines") {
			input "playMode1", "mode", title: "Mode when playing", required:false
			input "pauseMode1", "mode", title: "Mode when paused", required:false
			input "stopMode1", "mode", title: "Mode when stopped", required:false
			if (actions) {
				input "playRoutine1", "enum", title: "Routine when playing", required:false, options: actions
				input "pauseRoutine1", "enum", title: "Routine when paused", required:false, options: actions
				input "stopRoutine1", "enum", title: "Routine when stopped", required:false, options: actions
			}
		}
		section("Settings") {
			input(name: "bTreatTrailersAsPause1", type: "bool", title: "Use pause config for movie trailers")
            input "disabled", "capability.switch", title: "Switch to disable when ON", required: false, multiple: false
		}
    }
}


// Recieve command from parent app

def AppCommandRecieved(command, userName, playerName, playerIP, mediaType) {

//Check if room found
	def roomFound = findAMatch(playerName, playerIP, userName);
	if(roomFound == -1) {
		logWriterChild ("->Not matching any rooms [$userName @ $playerName - $playerIP ]")
        return
    } else {
		logWriterChild ("->Matched room [$userName @ $playerName - $playerIP ]")
    }
    
    
// Stop running if disable switch is activated    

    if (disabled != null) {
    	if(disabled.currentSwitch == "on") {
			logWriterChild ("->Disabled via switch")
        	return
        }
    }
    
//Translate play to pause if bTreatTrailersAsPause is enabled for this room
    if(bTreatTrailersAsPause1 && mediaType == "clip" && command == "onplay") {
    	command = "onpause"
		logWriterChild ("->Is playing trailer, treating it as a pause.")
    }


// Play, Pause or Stop

    if (command == "onplay") {
    	logWriterChild ("->Playing")
        ChangeMode(playMode1)
		ExecRoutine(playRoutine1)
		SetLevels(iLevelOnPlay1, colorOnPlay)
        SetSwitchesOff()
        settings."mSwitchPlay"?.on()
    }
    else if (command == "onpause") {        
        logWriterChild ("->Paused")
        ChangeMode(pauseMode1)
		ExecRoutine(pauseRoutine1)
    	SetLevels(iLevelOnPause1, colorOnPause)
        settings."mSwitchPause"?.on()
        if(bSwitchOffOnPause1) {
       		SetSwitchesOff()
        } else {
        	SetSwitchesOn()
        }
    }
    else if (command == "onstop") {
        logWriterChild ("->Stopped")
        ChangeMode(stopMode1)
		ExecRoutine(stopRoutine1)
    	SetLevels(iLevelOnStop1, colorOnStop)
        SetSwitchesOn()
        settings."mSwitchStop"?.on()
    }
}

// Actions

def ExecRoutine(routine) {
	if(!routine) return
	location.helloHome?.execute(routine)
}

def ChangeMode(newMode) {
    if (newMode != null && newMode != "" && location.mode != newMode) {
        if (location.modes?.find{it.name == newMode}) {
            setLocationMode(newMode)
        }  else {
            log.warn "Tried to change to undefined mode '${newMode}'"
        }
    }
}

def SetSwitchesOn() {
	logWriterChild ("SetSwitches")
	settings."switches1"?.on()
    settings."switches2"?.off()
}
def SetSwitchesOff() {
	logWriterChild ("SetSwitches")
	settings."switches1"?.off()
    settings."switches2"?.on()
}


def SetLevels(level, acolor) {
	// If color specified set hues
    if (acolor != null && level != null) {
		logWriterChild ("SetColors")
		settings."hues1"?.each { hue -> setColor(hue, acolor, level) }
	}
    else
    {
    	if (level != null) {
			logWriterChild ("SetLevelsWithoutColor")
			settings."hues1"?.each { hue -> dimIfOn(hue, level) }
			settings."dimmers1"?.each { dimmer -> dimIfOn(dimmer, level) }
		}
    }
}

private def dimIfOn(bulb, level) {
	if (!bDimOnlyIfOn1 || "on" == bulb.currentSwitch) {
		bulb.setLevel(level)
	}
}


private setColor(bulb, color1, level) {
	def hueColor = 0
	def saturation = 100
	switch(color1) {
		case "White":
			hueColor = 52
			saturation = 19
			break;
		case "Daylight":
			hueColor = 53
			saturation = 91
			break;
		case "Soft White":
			hueColor = 23
			saturation = 56
			break;
		case "Warm White":
			hueColor = 20
			saturation = 80 //83
			break;
		case "Blue":
			hueColor = 70
			break;
		case "Green":
			hueColor = 35
			break;
		case "Yellow":
			hueColor = 25
			break;
		case "Orange":
			hueColor = 10
			break;
		case "Purple":
			hueColor = 75
			break;
		case "Pink":
			hueColor = 83
			break;
		case "Red":
			hueColor = 100
			break;
	}
      
    if (color1 != null)
    {
        def newValue = [hue: hueColor, saturation: saturation, level: level]
        logWriterChild ("New Colors = $newValue")
        bulb.setColor(newValue)
    }
}


// Debug logging

private def logWriterChild(value) {	
    parent.logWriter (value)
}


//Is the player, IP or user found
def findAMatch(player, IP, user) {
    if(playerA1 == "*" || playerB1 == "*" || playerA1 == player || playerB1 == player || playerA1 == IP || playerB1 == IP || playerA1 == user || playerB1 == user) return 1;
    else return -1;
}