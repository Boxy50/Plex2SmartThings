import groovy.json.JsonBuilder

/**
 *  Plex Plus
 *
 *  Copyright 2015 Christian Hjelseth / Jake Tebbett
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * INSTALL
 * ###############
 *
 *	- Install both parent and cild apps via IDE - Only publish the parent App (This App)
 *	- Enable OAuth in IDE on the parent App (This App)
 *  - Setup the Plex2SmartThings.exe (For IP matching Jake's modified exe is required)
 * 
 * VERSION CONTROL - Plex Plus Parent
 * ###############
 *
 *  v2.0  - Modified Christian Hjelseth's excellent Smart App to use parent & child apps
 * 				- Allowing multi room matching to a single player
 * 				- Allowing flexible number of "rooms"
 * 		 - Added support for matching against Player Name or User Name or IP Address (IP address requires Jake's modified exe)
 *		 - Added support for on and off switches on the same state change.
 *		 - Added disabled switch to stop automation.
 *
 */

definition(
    name: "Plex Plus",
    namespace: "jebbett",
    author: "Christian Hjelseth & Jake Tebbett",
    description: "Allows web requests to dim/turn off/on lights when plex is playing",
    category: "My Apps",
    iconUrl: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png",
    iconX2Url: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png",
    iconX3Url: "http://1sd3vh2v9afo91q38219tlj1.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/plex-icon-server-big-3b6e2330294017827d0354f0c768a3ab.png",
    oauth: [displayName: "PlexServer", displayLink: ""])


def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
    // nothing needed here, since the child apps will handle preferences/subscriptions
    // this just logs some messages for demo/information purposes
    log.debug "there are ${childApps.size()} child smartapps"
    childApps.each {child ->
        log.debug "child app: ${child.label}"
    }
    if (!state.accessToken) {
    	createAccessToken()
   	}
}

preferences {
	page(name: "mainMenu")
}

def mainMenu() {

	if (state.debugLogging == null) 	{ state.debugLogging = false }

    dynamicPage(name: "mainMenu", title: "Rooms", install: true, uninstall: false,submitOnChange: true) {              
       
        section {
            app(name: "childapp", appName: "Plex Plus Child", namespace: "jebbett", title: "Create New Room", multiple: true)
            }	
        
    if (!state.accessToken) {
    	createAccessToken()
   	}
    	section(title: "API Information") { 
        	href url: "https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/appinfo?access_token=${state.accessToken}", 
            		style:"embedded", required:false, title:"API Information", description: "Tap to view Info"
    	}
        
        // Enables logging debug only when enabled
        section(title: "Debug Logging") {
       		paragraph "If you experiencing issues please enable logging to help troubleshoot"
            input "debugLogging", "bool", title: "Debug Logging...", required: false, defaultValue: false, refreshAfterSelection: true
            	
            if (debugLogging) { 
            	state.debugLogging = true 
                logWriter("Debug Logging has been ${state.debugLogging.toString().toUpperCase()}")
                paragraph "Debug Logging is Enabled: ${state.debugLogging}"
            }
            else { 
            	state.debugLogging = false 
            	logWriter("Debug Logging has been ${state.debugLogging.toString().toUpperCase()}")    
            }
    	}
        
        
    }
}

// These Methods Generate Json for you Info Only
def appInfoJson() {
	def configJson = new groovy.json.JsonOutput().toJson([
    	appId:        app.id,
    	accessToken:  state.accessToken,
    	appUrl: 	"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}",
    	onPlay: 	"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onplay",
		onPause:	"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onpause",
		onStop:		"https://graph-eu01-euwest1.api.smartthings.com/api/smartapps/installations/${app.id}/statechanged/onstop"
    ])

    def configString = new groovy.json.JsonOutput().prettyPrint(configJson)
    render contentType: "text/plain", data: configString
}

mappings {
  path("/statechanged/:command") 	{ action: [ GET: "OnCommandRecieved" ] }
  path("/appinfo") 					{ action: [ GET: "appInfoJson"]   }
}

private def logWriter(value) {
	if (state.debugLogging) {
        log.debug "${value}"
    }	
}


def OnCommandRecieved() {
	def command = params.command
	def userName = params.user
	def playerName = params.player
    def playerIP = params.ipadd
	def mediaType = params.type
    
	logWriter ("Plex.$command($userName, $playerName, $playerIP, $mediaType)")

// If Plex2SmartThings.exe has not been modified to return IP Address (ipadd) then return No IP to stop false triggering.

    if (playerIP == null) {
        playerIP = "No IP Returned"
    }
    
	childApps.each { child ->
    	child.AppCommandRecieved(command, userName, playerName, playerIP, mediaType)
    }
	return

}